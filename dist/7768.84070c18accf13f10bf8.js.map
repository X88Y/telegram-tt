{"version":3,"file":"7768.84070c18accf13f10bf8.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        {/* <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu> */}\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <ChatFolders\n        shouldHideFolderTabs={isForumPanelVisible}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onContentChange}\n        foldersDispatch={foldersDispatch}\n        isForumPanelOpen={isForumPanelVisible}\n      />\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const user = localStorage.getItem('proxyData');\n  const parsedUser = JSON.parse(user as string);\n  const allowedChats = parsedUser?.allowedChats as number[];\n  const lastMessageIdProtected = parsedUser?.lastMessageId as number || 0;\n\n  if (!allowedChats.includes(Number(chatId))) {\n    window.location.href = '/';\n  }\n\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        if (message.id < lastMessageIdProtected) {\n          return undefined;\n        }\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","scrollToTop","useDerivedState","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","activeKey","renderCount","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onSelectSettings","onSelectContacts","onSelectArchived","onReset","setGlobalSearchDate","setSharedSettingOption","setGlobalSearchChatId","lockScreen","oldLang","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","Contacts","selectedSearchDate","formatDateToString","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","IS_BETA","useFullscreenStatus","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","ShowTransition","isCustom","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","IS_MAC_OS","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","children","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","handleAvatarClick","avatarRef","hiddenName","Avatar","renderAvatar","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","contextMenuAnchor","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","anchor","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","getItem","parsedUser","allowedChats","lastMessageIdProtected","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","userName","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaHash","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","DropdownMenu","forceOpen","trigger","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","useWindowSize","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","label","checked","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onTransitionEnd","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","play","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","isSavedMessages","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","MenuSeparator","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}